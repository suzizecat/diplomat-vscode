{
  "name": "diplomat-host",
  "displayName": "diplomat-host",
  "description": "",
  "publisher": "jfaucher",
  "version": "0.4.0-dev.1",
  "repository": {},
  "engines": {
    "vscode": "^1.81.0"
  },
  "categories": [
    "Other",
    "Snippets",
    "Programming Languages",
    "Linters"
  ],
  "activationEvents": [
    "onLanguage:systemverilog"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "diplomat-view",
          "title": "Diplomat",
          "icon": "$(symbol-class)"
        }
      ]
    },
    "views": {
      "diplomat-view": [
        {
          "id": "design-hierarchy",
          "name": "Hierarchy",
          "contextualTitle": "Design Hierarchy Explorer",
          "when": "diplomat-host:enabled",
          "icon": "$(symbol-class)"
        }
      ],
      "explorer": [
        {
          "id": "diplomat-prj",
          "name": "Projects",
          "when": "diplomat-host:enabled",
          "contextualTitle": "Diplomat project viewer",
          "icon": "$(symbol-class)"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "diplomat-prj",
        "contents": "No project seems to be setup in the current workspace. You may automatically build a project using an already existing top file or create an empty project.\n[Create Project from File](command:diplomat-host.prj.create-project-from-top)\n[Create Empty Project](command:diplomat-host.prj.create-project)"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "diplomat-host.refresh-hierarchy",
          "when": "view == design-hierarchy",
          "group": "navigation@0"
        },
        {
          "command": "diplomat-host.waves.enable-follow",
          "when": "view == design-hierarchy && diplomat-host:viewerCanFollowSignal && !diplomat-host:followWaveSelection",
          "group": "navigation@1"
        },
        {
          "command": "diplomat-host.waves.disable-follow",
          "when": "view == design-hierarchy && diplomat-host:viewerCanFollowSignal && diplomat-host:followWaveSelection",
          "group": "navigation@1"
        },
        {
          "command": "diplomat-host.prj.create-project",
          "when": "view == diplomat-prj",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "diplomat-host.prj.remove-file",
          "when": "view == diplomat-prj",
          "group": "inline"
        },
        {
          "command": "diplomat-host.prj.remove-file",
          "when": "view == diplomat-prj",
          "group": "1_diplomat@2"
        },
        {
          "command": "diplomat-host.prj.set-project",
          "when": "view == diplomat-prj && viewItem == project",
          "group": "1_diplomat@1"
        },
        {
          "command": "diplomat-host.set-top",
          "group": "1_diplomat",
          "when": "view == diplomat-prj && viewItem == file"
        }
      ],
      "explorer/context": [
        {
          "command": "diplomat-server.ignore",
          "group": "2_workspace"
        },
        {
          "command": "diplomat-host.prj.create-project-from-top",
          "group": "2_workspace",
          "when": "resourceExtname in diplomat-host:supportedDesignFiles"
        },
        {
          "command": "diplomat-host.set-top",
          "group": "2_workspace",
          "when": "resourceExtname in diplomat-host:supportedDesignFiles"
        },
        {
          "command": "diplomat-host.open-waves",
          "group": "navigation",
          "when": "resourceExtname in diplomat-host:supportedWavesFiles"
        }
      ],
      "editor/context": [
        {
          "command": "diplomat-host.waves.add-signal",
          "group": "1_run",
          "when": "diplomat-host:viewerEnabled"
        }
      ],
      "commandPalette": [
        {
          "command": "diplomat-host.prj.create-project-from-top",
          "when": "never"
        },
        {
          "command": "diplomat-server.ignore",
          "when": "never"
        },
        {
          "command": "diplomat-host.set-top",
          "when": "never"
        },
        {
          "command": "diplomat-host.waves.add-signal",
          "when": "never"
        },
        {
          "command": "diplomat-host.open-waves",
          "when": "never"
        },
        {
          "command": "diplomat-server.pull-config",
          "when": "never"
        },
        {
          "command": "diplomat-server.push-config",
          "when": "never"
        },
        {
          "command": "diplomat-host.waves.reload",
          "when": "diplomat-host:viewerEnabled"
        }
      ]
    },
    "commands": [
      {
        "command": "diplomat-host.helloWorld",
        "title": "Hello World"
      },
      {
        "command": "diplomat-host.refresh-hierarchy",
        "title": "Diplomat: Refresh the design hierarchy",
        "icon": "$(refresh)"
      },
      {
        "command": "diplomat-server.ignore",
        "title": "Ignore path for Diplomat LSP"
      },
      {
        "command": "diplomat-host.set-top",
        "title": "Set workspace top level"
      },
      {
        "command": "diplomat-host.force-pull-config",
        "title": "Diplomat: Save the workspace configuration from the server"
      },
      {
        "command": "diplomat-host.force-push-config",
        "title": "Diplomat: Load the workspace configuration to the server"
      },
      {
        "command": "diplomat-server.pull-config",
        "title": "Save the configuration from the server"
      },
      {
        "command": "diplomat-server.push-config",
        "title": "Load the configuration from the workspace to the server"
      },
      {
        "command": "diplomat-host.show-config",
        "title": "Diplomat: Open config file"
      },
      {
        "command": "diplomat-host.testserver",
        "title": "Test diplomat connexion"
      },
      {
        "command": "diplomat-host.instanciate",
        "title": "Instanciate module"
      },
      {
        "command": "diplomat-server.get-modules",
        "title": "Get a list of available modules"
      },
      {
        "command": "diplomat-server.full-index",
        "title": "Diplomat: Reindex"
      },
      {
        "command": "diplomat-server.index-dump",
        "title": "Diplomat: Dump index"
      },
      {
        "command": "diplomat-server.reorder-files",
        "title": "Diplomat: Reorder"
      },
      {
        "command": "diplomat-server.reindex",
        "title": "Diplomat: Index the Workspace"
      },
      {
        "command": "diplomat-host.open-waves",
        "title": "Open in the waveform viewer"
      },
      {
        "command": "diplomat-host.waves.clear-annotations",
        "title": "Diplomat: Clear waves annotations"
      },
      {
        "command": "diplomat-host.waves.add-signal",
        "title": "Add symbol to waveform"
      },
      {
        "command": "diplomat-host.waves.reload",
        "title": "Diplomat: Reload waveform"
      },
      {
        "command": "diplomat-host.waves.disable-follow",
        "title": "Diplomat: Stop following the waveform selection",
        "icon": "$(lock)"
      },
      {
        "command": "diplomat-host.waves.enable-follow",
        "title": "Diplomat: Follow waveform selection",
        "icon": "$(unlock)"
      },
      {
        "command": "diplomat-host.prj.create-project",
        "title": "Diplomat: Create new project",
        "shortTitle": "Create new project",
        "icon": "$(add)"
      },
      {
        "command": "diplomat-host.prj.create-project-from-top",
        "title": "Diplomat: Create new project from file",
        "shortTitle": "Create new project from file",
        "icon": "$(add)"
      },
      {
        "command": "diplomat-host.prj.remove-file",
        "title": "Diplomat: Remove element from project",
        "shortTitle": "Remove element from project",
        "icon": "$(trash)"
      },
      {
        "command": "diplomat-host.prj.set-project",
        "title": "Diplomat: Set project as active"
      }
    ],
    "languages": [
      {
        "id": "systemverilog",
        "aliases": [
          "SystemVerilog",
          "System Verilog",
          "systemverilog"
        ],
        "extensions": [
          ".sv",
          ".SV",
          ".svh",
          ".SVH",
          ".svi",
          ".v"
        ],
        "configuration": "./configs/systemverilog.configuration.json"
      },
      {
        "id": "verilog",
        "aliases": [
          "Verilog"
        ],
        "extensions": [
          ".v"
        ],
        "configuration": "./configs/systemverilog.configuration.json"
      }
    ],
    "snippets": [
      {
        "language": "systemverilog",
        "path": "./resources/snippets.json"
      },
      {
        "language": "verilog",
        "path": "./resources/snippets.json"
      }
    ],
    "grammars": [
      {
        "language": "systemverilog",
        "scopeName": "source.systemverilog",
        "path": "./syntaxes/systemverilog.tmLanguage.json"
      },
      {
        "language": "verilog",
        "scopeName": "source.verilog",
        "path": "./syntaxes/systemverilog.tmLanguage.json"
      }
    ],
    "configuration": {
      "title": "Diplomat Server",
      "properties": {
        "diplomatServer.projects.projectFilePath": {
          "scope": "resource",
          "description": "Path for the diplomat projects configuration file. If empty (default) the storage will be located in the VSCode Extension storage space.",
          "type": "string",
          "default": ""
        },
        "diplomatServer.serverArgs": {
          "description": "Server arguments",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "diplomatServer.index.validExtensions": {
          "description": "Valid systemverilog extensions for indexing",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            ".v",
            ".sv",
            ".svh"
          ]
        },
        "diplomatServer.server.useTCP": {
          "description": "Use TCP connection to an already started LS",
          "type": "boolean",
          "default": false
        },
        "diplomatServer.serverPath": {
          "description": "Diplomat LSP command",
          "type": "string",
          "default": "slang-lsp"
        },
        "diplomatServer.tools.GTKWave.path": {
          "description": "GTKWave executable path",
          "type": "string",
          "default": "gtkwave"
        },
        "diplomatServer.tools.GTKWave.verbose": {
          "description": "Dump GTKWave outputs to extension outputs ",
          "type": "boolean",
          "default": false
        },
        "diplomatServer.tools.GTKWave.options": {
          "description": "Added options for GTKWave call",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "diplomatServer.waveformViewer.reloadOnTestEnd": {
          "description": "Automatically reload the waveform viewer at the end of a test if the waveform viewer is opened.",
          "type": "string",
          "enum": [
            "always",
            "never",
            "onSingle"
          ],
          "enumItemLabels": [
            "Always reload",
            "Never reload",
            "Reload only if a single testcase has been ran"
          ],
          "default": [
            "onSingle"
          ]
        }
      }
    },
    "colors": [
      {
        "id": "diplomathost.annotationForeground",
        "description": "Specifies the foreground color for the annotations",
        "defaults": {
          "dark": "#adbec5",
          "light": "#797a79",
          "highContrast": "#adbec5"
        }
      },
      {
        "id": "diplomathost.annotationBackground",
        "description": "Specifies the background color for the annotations",
        "defaults": {
          "dark": "#1e2c31",
          "light": "#f4f5f4",
          "highContrast": "#1e2c31"
        }
      }
    ]
  },
  "scripts": {
    "yj": "js-yaml ./syntaxes/systemverilog.tmLanguage.yaml >./syntaxes/systemverilog.tmLanguage.json",
    "precompile" : "npm run yj && npm run check-types",
    "compile": "npm run precompile && node esbuild.js",
    "check-types" : "tsc --noEmit",
    "vscode:prepublish": "npm run package",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js",
    "publish": "vsce package",
    "package": "npm run precompile && node esbuild.js --production",
    "prepare": "ts-patch install && typia patch"
  },
  "devDependencies": {
    "@types/glob": "^8.1.0",
    "@types/node": "^20.5.1",
    "@types/vscode": "^1.81.0",
    "@vscode/test-electron": "^2.3.4",
    "@vscode/vsce": "~2.22.0",
    "esbuild": "^0.25.9",
    "js-yaml": "^4.1.0",
    "ts-patch": "^3.2.1",
    "typescript": "^5.5.2"
  },
  "dependencies": {
    "fast-xml-parser": "~4.4.1",
    "semver": "~7.7",
    "ts-semaphore": "1.0.0",
    "typia": "~6.5.4",
    "vscode-languageclient": "9.0.1",
    "vscode-uri": "^3.1.0"
  }
}
