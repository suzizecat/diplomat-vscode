name: Verilog
scopeName: source.verilog
fileTypes:
  - v
  - vh
patterns:
  - include: '#comments'
  - include: '#strings'
  - include: '#typedef-enum-struct-union'
  - include: '#typedef'
  - include: '#functions'
  - include: '#keywords'
  - include: '#tables'
  - include: '#function-task'
  - include: '#module-declaration'
  - include: '#class-declaration'
  - include: '#enum-struct-union'
  - include: '#sequence'
  - include: '#all-types'
  - include: '#module-parameters'
  - include: '#module-no-parameters'
  - include: '#port-net-parameter'
  - include: '#system-tf'
  - include: '#assertion'
  - include: '#bind-directive'
  - include: '#cast-operator'
  - include: '#storage-scope'
  - include: '#attributes'
  - include: '#imports'
  - include: '#operators'
  - include: '#constants'
  - include: '#identifiers'
  - include: '#selects'
repository:
  function-task:
    begin: '[ \t\r\n]*(?:\b(virtual)[ \t\r\n]+)?(?:\b(function|task)\b)(?:[ \t\r\n]+\b(static|automatic)\b)?'
    beginCaptures:
      '1':
        name: storage.modifier.verilog
      '2':
        name: storage.type.function.verilog
      '3':
        name: storage.modifier.verilog
    end: ;
    endCaptures:
      '0':
        name: punctuation.definition.function.end.verilog
    patterns:
      - match: >-
          [ \t\r\n]*(?:\b([a-zA-Z_][a-zA-Z0-9_$]*)(::))?([a-zA-Z_][a-zA-Z0-9_$]*\b[ \t\r\n]+)?(?:\b(signed|unsigned)\b[ \t\r\n]*)?(?:(\[[a-zA-Z0-9_:$\.\-\+\*/%`' \t\r\n\[\]\(\)]*\])[ \t\r\n]*)?(?:\b([a-zA-Z_][a-zA-Z0-9_$]*)\b[ \t\r\n]*)(?=\(|;)
        captures:
          '1':
            name: support.type.scope.verilog
          '2':
            name: keyword.operator.scope.verilog
          '3':
            patterns:
              - include: '#built-ins'
              - match: '[a-zA-Z_][a-zA-Z0-9_$]*'
                name: storage.type.user-defined.verilog
          '4':
            patterns:
              - include: '#modifiers'
          '5':
            patterns:
              - include: '#selects'
          '6':
            name: entity.name.function.verilog
      - include: '#keywords'
      - include: '#port-net-parameter'
      - include: '#base-grammar'
      - include: '#identifiers'
    name: meta.function.verilog
  typedef:
    begin: >-
      [ \t\r\n]*\b(?:(typedef)[ \t\r\n]+)(?:([a-zA-Z_][a-zA-Z0-9_$]*)(?:[ \t\r\n]+\b(signed|unsigned)\b)?(?:[ \t\r\n]*(\[[a-zA-Z0-9_:$\.\-\+\*/%`' \t\r\n\[\]\(\)]*\])?))?(?=[ \t\r\n]*[a-zA-Z_\\])
    beginCaptures:
      '1':
        name: keyword.control.verilog
      '2':
        patterns:
          - include: '#built-ins'
          - match: \bvirtual\b
            name: storage.modifier.verilog
      '3':
        patterns:
          - include: '#modifiers'
      '4':
        patterns:
          - include: '#selects'
    end: ;
    endCaptures:
      '0':
        name: punctuation.definition.typedef.end.verilog
    patterns:
      - include: '#identifiers'
      - include: '#selects'
    name: meta.typedef.verilog
  typedef-enum-struct-union:
    begin: >-
      [ \t\r\n]*\b(typedef)[ \t\r\n]+(enum|struct|union(?:[ \t\r\n]+tagged)?|class|interface[ \t\r\n]+class)(?:[ \t\r\n]+(?!packed|signed|unsigned)([a-zA-Z_][a-zA-Z0-9_$]*)?(?:[ \t\r\n]*(\[[a-zA-Z0-9_:$\.\-\+\*/%`' \t\r\n\[\]\(\)]*\])?))?(?:[ \t\r\n]+(packed))?(?:[ \t\r\n]+(signed|unsigned))?(?=[ \t\r\n]*(?:{|$))
    beginCaptures:
      '1':
        name: keyword.control.verilog
      '2':
        name: keyword.control.verilog
      '3':
        patterns:
          - include: '#built-ins'
      '4':
        patterns:
          - include: '#selects'
      '5':
        name: storage.modifier.verilog
      '6':
        name: storage.modifier.verilog
    end: (?<=})[ \t\r\n]*([a-zA-Z_][a-zA-Z0-9_$]*|(?<=^|[ \t\r\n])\\[!-~]+(?=$|[ \t\r\n]))(?:[ \t\r\n]*(\[[a-zA-Z0-9_:$\.\-\+\*/%`' \t\r\n\[\]\(\)]*\])?)[ \t\r\n]*[,;]
    endCaptures:
      '1':
        name: storage.type.verilog
      '2':
        patterns:
          - include: '#selects'
    patterns:
      - include: '#port-net-parameter'
      - include: '#keywords'
      - include: '#base-grammar'
      - include: '#identifiers'
    name: meta.typedef-enum-struct-union.verilog
  enum-struct-union:
    begin: >-
      [ \t\r\n]*\b(enum|struct|union(?:[ \t\r\n]+tagged)?|class|interface[ \t\r\n]+class)(?:[ \t\r\n]+(?!packed|signed|unsigned)([a-zA-Z_][a-zA-Z0-9_$]*)?(?:[ \t\r\n]*(\[[a-zA-Z0-9_:$\.\-\+\*/%`' \t\r\n\[\]\(\)]*\])?))?(?:[ \t\r\n]+(packed))?(?:[ \t\r\n]+(signed|unsigned))?(?=[ \t\r\n]*(?:{|$))
    beginCaptures:
      '1':
        name: keyword.control.verilog
      '2':
        patterns:
          - include: '#built-ins'
      '3':
        patterns:
          - include: '#selects'
      '4':
        name: storage.modifier.verilog
      '5':
        name: storage.modifier.verilog
    end: (?<=})[ \t\r\n]*([a-zA-Z_][a-zA-Z0-9_$]*|(?<=^|[ \t\r\n])\\[!-~]+(?=$|[ \t\r\n]))(?:[ \t\r\n]*(\[[a-zA-Z0-9_:$\.\-\+\*/%`' \t\r\n\[\]\(\)]*\])?)[ \t\r\n]*[,;]
    endCaptures:
      '1':
        patterns:
          - include: '#identifiers'
      '2':
        patterns:
          - include: '#selects'
    patterns:
      - include: '#keywords'
      - include: '#base-grammar'
      - include: '#identifiers'
    name: meta.enum-struct-union.verilog
  module-declaration:
    begin: '[ \t\r\n]*\b((?:macro)?module|interface|program|package|modport)[ \t\r\n]+(?:(static|automatic)[ \t\r\n]+)?([a-zA-Z_][a-zA-Z0-9_$]*)\b'
    beginCaptures:
      '1':
        name: keyword.control.verilog
      '2':
        name: storage.modifier.verilog
      '3':
        name: entity.name.type.module.verilog
    end: ;
    endCaptures:
      '0':
        name: punctuation.definition.module.end.verilog
    patterns:
      - include: '#parameters'
      - include: '#port-net-parameter'
      - include: '#imports'
      - include: '#base-grammar'
      - include: '#system-tf'
      - include: '#identifiers'
    name: meta.module.verilog
  sequence:
    match: '[ \t\r\n]*\b(sequence)[ \t\r\n]+([a-zA-Z_][a-zA-Z0-9_$]*)\b'
    captures:
      '1':
        name: keyword.control.verilog
      '2':
        name: entity.name.function.verilog
    name: meta.sequence.verilog
  bind-directive:
    match: '[ \t\r\n]*\b(bind)[ \t\r\n]+([a-zA-Z_][a-zA-Z0-9_$\.]*)\b'
    captures:
      '1':
        name: keyword.control.verilog
      '2':
        name: entity.name.type.module.verilog
    name: meta.definition.verilog
  assertion:
    match: \b([a-zA-Z_][a-zA-Z0-9_$]*)[ \t\r\n]*(:)[ \t\r\n]*(assert|assume|cover|restrict)\b
    captures:
      '1':
        name: entity.name.goto-label.php
      '2':
        name: keyword.operator.verilog
      '3':
        name: keyword.sva.verilog
  compiler-directives:
    patterns:
      - match: >-
          (`)(else|endif|endcelldefine|celldefine|nounconnected_drive|resetall|undefineall|end_keywords|__FILE__|__LINE__)\b
        captures:
          '1':
            name: punctuation.definition.directive.verilog
          '2':
            name: string.regexp.verilog
      - match: (`)(ifdef|ifndef|elsif|define|undef|pragma)[ \t\r\n]+([a-zA-Z_][a-zA-Z0-9_$]*)\b
        captures:
          '1':
            name: punctuation.definition.directive.verilog
          '2':
            name: string.regexp.verilog
          '3':
            name: variable.other.constant.preprocessor.verilog
      - match: (`)(include|timescale|default_nettype|unconnected_drive|line|begin_keywords)\b
        captures:
          '1':
            name: punctuation.definition.directive.verilog
          '2':
            name: string.regexp.verilog
      - begin: (`)(protected)\b
        beginCaptures:
          '1':
            name: punctuation.definition.directive.verilog
          '2':
            name: string.regexp.verilog
        end: (`)(endprotected)\b
        endCaptures:
          '1':
            name: punctuation.definition.directive.verilog
          '2':
            name: string.regexp.verilog
        name: meta.crypto.verilog
      - match: (`)([a-zA-Z_][a-zA-Z0-9_$]*)\b
        captures:
          '1':
            name: punctuation.definition.directive.verilog
          '2':
            name: variable.other.constant.preprocessor.verilog
    name: meta.preprocessor.verilog
  keywords:
    patterns:
      - match: >-
          [ \t\r\n]*\b(edge|negedge|posedge|cell|config|defparam|design|disable|endgenerate|endspecify|event|generate|ifnone|incdir|instance|liblist|library|noshowcancelled|pulsestyle_onevent|pulsestyle_ondetect|scalared|showcancelled|specify|specparam|use|vectored)\b
        captures:
          '1':
            name: keyword.other.verilog
      - include: '#sv-control'
      - include: '#sv-control-begin'
      - include: '#sv-control-end'
      - include: '#sv-definition'
      - include: '#sv-cover-cross'
      - include: '#sv-std'
      - include: '#sv-option'
      - include: '#sv-local'
      - include: '#sv-rand'
  sv-control:
    match: >-
      [ \t\r\n]*\b(initial|always|always_comb|always_ff|always_latch|final|assign|deassign|force|release|wait|forever|repeat|alias|while|for|if|iff|else|case|casex|casez|default|endcase|return|break|continue|do|foreach|clocking|coverpoint|property|bins|binsof|illegal_bins|ignore_bins|randcase|matches|solve|before|expect|cross|ref|srandom|struct|chandle|tagged|extern|throughout|timeprecision|timeunit|priority|type|union|wait_order|triggered|randsequence|context|pure|wildcard|new|forkjoin|unique|unique0|priority)\b
    captures:
      '1':
        name: keyword.control.verilog
  sv-control-begin:
    match: >-
      [ \t\r\n]*\b(begin|fork)\b(?:[ \t\r\n]*(:)[ \t\r\n]*([a-zA-Z_][a-zA-Z0-9_$]*))?
    captures:
      '1':
        name: keyword.control.verilog
      '2':
        name: punctuation.definition.label.verilog
      '3':
        name: entity.name.section.verilog
    name: meta.item.begin.verilog
  sv-control-end:
    match: >-
      [ \t\r\n]*\b(end|endmodule|endinterface|endprogram|endchecker|endclass|endpackage|endconfig|endfunction|endtask|endproperty|endsequence|endgroup|endprimitive|endclocking|endgenerate|join|join_any|join_none)\b(?:[ \t\r\n]*(:)[ \t\r\n]*([a-zA-Z_][a-zA-Z0-9_$]*))?
    captures:
      '1':
        name: keyword.control.verilog
      '2':
        name: punctuation.definition.label.verilog
      '3':
        name: entity.name.section.verilog
    name: meta.item.end.verilog
  sv-std:
    match: '\b(std)\b::'
    name: support.class.verilog
  sv-definition:
    match: >-
      [ \t\r\n]*\b(primitive|package|constraint|interface|covergroup|program)[ \t\r\n]+\b([a-zA-Z_][a-zA-Z0-9_$]*)\b
    captures:
      '1':
        name: keyword.control.verilog
      '2':
        name: entity.name.type.class.verilog
    name: meta.definition.verilog
  sv-cover-cross:
    match: >-
      (([a-zA-Z_][a-zA-Z0-9_$]*)[ \t\r\n]*(:))?[ \t\r\n]*(coverpoint|cross)[ \t\r\n]+([a-zA-Z_][a-zA-Z0-9_$]*)
    captures:
      '2':
        name: entity.name.type.class.verilog
      '3':
        name: keyword.operator.other.verilog
      '4':
        name: keyword.control.verilog
    name: meta.definition.verilog
  class-declaration:
    begin: >-
      [ \t\r\n]*\b(virtual[ \t\r\n]+)?(class)(?:[ \t\r\n]+(static|automatic))?[ \t\r\n]+([a-zA-Z_][a-zA-Z0-9_$:]*)(?:[ \t\r\n]+(extends|implements)[ \t\r\n]+([a-zA-Z_][a-zA-Z0-9_$:]*))?
    beginCaptures:
      '1':
        name: storage.modifier.verilog
      '2':
        name: storage.type.class.verilog
      '3':
        name: storage.modifier.verilog
      '4':
        name: entity.name.type.class.verilog
      '5':
        name: keyword.control.verilog
      '6':
        name: entity.name.type.class.verilog
    end: ;
    endCaptures:
      '0':
        name: punctuation.definition.class.end.verilog
    patterns:
      - match: '[ \t\r\n]+\b(extends|implements)[ \t\r\n]+([a-zA-Z_][a-zA-Z0-9_$:]*)(?:[ \t\r\n]*,[ \t\r\n]*([a-zA-Z_][a-zA-Z0-9_$:]*))*'
        captures:
          '1':
            name: keyword.control.verilog
          '2':
            name: entity.name.type.class.verilog
          '3':
            name: entity.name.type.class.verilog
      - match: '[ \t\r\n]+\b([a-zA-Z_][a-zA-Z0-9_$]*)[ \t\r\n]*(#)\('
        captures:
          '1':
            name: storage.type.userdefined.verilog
          '2':
            name: keyword.operator.param.verilog
        name: meta.typedef.class.verilog
      - include: '#port-net-parameter'
      - include: '#base-grammar'
      - include: '#module-binding'
      - include: '#identifiers'
    name: meta.class.verilog
  system-tf:
    match: \$[a-zA-Z0-9_$][a-zA-Z0-9_$]*\b
    name: support.function.verilog
  cast-operator:
    match: '[ \t\r\n]*([0-9]+|[a-zA-Z_][a-zA-Z0-9_$]*)('')(?=\()'
    captures:
      '1':
        patterns:
          - include: '#built-ins'
          - include: '#constants'
          - match: '[a-zA-Z_][a-zA-Z0-9_$]*'
            name: storage.type.user-defined.verilog
      '2':
        name: keyword.operator.cast.verilog
    name: meta.cast.verilog
  sv-option:
    match: '[ \t\r\n]*\b(option)\.'
    captures:
      '1':
        name: keyword.cover.verilog
  sv-local:
    match: '[ \t\r\n]*\b(const|static|protected|virtual|localparam|parameter|local)\b'
    captures:
      '1':
        name: keyword.other.verilog
  sv-rand:
    match: '[ \t\r\n]*\b(?:rand|randc)\b'
    name: storage.type.rand.verilog
  module-parameters:
    begin: >-
      [ \t\r\n]*\b(?:(bind)[ \t\r\n]+([a-zA-Z_][a-zA-Z0-9_$\.]*)[ \t\r\n]+)?([a-zA-Z_][a-zA-Z0-9_$]*)[ \t\r\n]+(?!intersect|and|or|throughout|within)(?=#[^#])
    beginCaptures:
      '1':
        name: keyword.control.verilog
      '2':
        name: entity.name.type.module.verilog
      '3':
        name: entity.name.type.module.verilog
    end: \)(?:[ \t\r\n]*(;))?
    endCaptures:
      '1':
        name: punctuation.module.instantiation.end.verilog
    patterns:
      - match: '\b([a-zA-Z_][a-zA-Z0-9_$]*)\b(?=[ \t\r\n]*\()'
        name: variable.other.module.verilog
      - include: '#module-binding'
      - include: '#parameters'
      - include: '#comments'
      - include: '#operators'
      - include: '#constants'
      - include: '#strings'
      - include: '#port-net-parameter'
      - match: '\b([a-zA-Z_][a-zA-Z0-9_$]*)\b(?=[ \t\r\n]*$)'
        name: variable.other.module.verilog
      - include: '#identifiers'
    name: meta.module.parameters.verilog
  module-no-parameters:
    begin: >-
      [ \t\r\n]*\b(?:(bind|pullup|pulldown)[ \t\r\n]+(?:([a-zA-Z_][a-zA-Z0-9_$\.]*)[ \t\r\n]+)?)?((?:\b(?:and|nand|or|nor|xor|xnor|buf|not|bufif[01]|notif[01]|r?[npc]mos|r?tran|r?tranif[01])\b|[a-zA-Z_][a-zA-Z0-9_$]*))[ \t\r\n]+(?!intersect|and|or|throughout|within)([a-zA-Z_][a-zA-Z0-9_$]*)(?:[ \t\r\n]*(\[[a-zA-Z0-9_:$\.\-\+\*/%`' \t\r\n\[\]\(\)]*\])?)[ \t\r\n]*(?=\(|$)(?!;)
    beginCaptures:
      '1':
        name: keyword.control.verilog
      '2':
        name: entity.name.type.module.verilog
      '3':
        name: entity.name.type.module.verilog
      '4':
        name: variable.other.module.verilog
      '5':
        patterns:
          - include: '#selects'
    end: \)(?:[ \t\r\n]*(;))?
    endCaptures:
      '1':
        name: punctuation.module.instantiation.end.verilog
    patterns:
      - include: '#module-binding'
      - include: '#comments'
      - include: '#operators'
      - include: '#constants'
      - include: '#strings'
      - include: '#port-net-parameter'
      - match: '\b([a-zA-Z_][a-zA-Z0-9_$]*)\b(?=[ \t\r\n]*(\(|$))'
        name: variable.other.module.verilog
      - include: '#identifiers'
    name: meta.module.no_parameters.verilog
  functions:
    match: '[ \t\r\n]*\b(?!while|for|if|iff|else|case|casex|casez)([a-zA-Z_][a-zA-Z0-9_$]*)(?=[ \t\r\n]*\()'
    name: entity.name.function.verilog
  all-types:
    patterns:
      - include: '#built-ins'
      - include: '#modifiers'
  constants:
    patterns:
      - match: >-
          (\b[1-9][0-9_]*)?'([sS]?[bB][ \t\r\n]*[0-1xXzZ?][0-1_xXzZ?]*|[sS]?[oO][ \t\r\n]*[0-7xXzZ?][0-7_xXzZ?]*|[sS]?[dD][ \t\r\n]*[0-9xXzZ?][0-9_xXzZ?]*|[sS]?[hH][ \t\r\n]*[0-9a-fA-FxXzZ?][0-9a-fA-F_xXzZ?]*)((e|E)(\+|-)?[0-9]+)?(?!'|\w)
        name: constant.numeric.verilog
      - match: "'[01xXzZ]"
        name: constant.numeric.bit.verilog
      - match: \b(?:\d[\d_\.]*(?<!\.)(?:e|E)(?:\+|-)?[0-9]+)\b
        name: constant.numeric.exp.verilog
      - match: \b(?:\d[\d_\.]*(?!(?:[\d\.]|[ \t\r\n]*(?:e|E|fs|ps|ns|us|ms|s))))\b
        name: constant.numeric.decimal.verilog
      - match: \b(?:\d[\d\.]*[ \t\r\n]*(?:fs|ps|ns|us|ms|s))\b
        name: constant.numeric.time.verilog
      - include: '#compiler-directives'
      - match: \b(?:this|super|null)\b
        name: constant.language.verilog
      - match: \b([A-Z][A-Z0-9_]*)\b
        name: constant.other.net.verilog
      - match: \b(?<!\.)([A-Z0-9_]+)(?!\.)\b
        name: constant.numeric.parameter.uppercase.verilog
      - match: \.\*
        name: keyword.operator.quantifier.regexp
  operators:
    patterns:
      - match: \+=|-=|/=|\*=|%=|&=|\|=|\^=|>>>=|>>=|<<<=|<<=|<=|=
        name: keyword.operator.assignment.verilog
      # - match: :|\?
      #   name: keyword.operator.ternary.verilog
      - match: \+\+
        name: keyword.operator.increment.verilog
      - match: --
        name: keyword.operator.decrement.verilog
      - match: \+|-|\*\*|\*|/|%
        name: keyword.operator.arithmetic.verilog
      - match: '!|&&|\|\|'
        name: keyword.operator.logical.verilog
      - match: <<<|<<|>>>|>>
        name: keyword.operator.bitwise.shift.verilog
      - match: ~&|~\||~|\^~|~\^|&|\||\^|{|'{|}|:|\?
        name: keyword.operator.bitwise.verilog
      - match: <=|<|>=|>|==\?|!=\?|===|!==|==|!=
        name: keyword.operator.comparison.verilog
      - match: '@|##|#|->|<->'
        name: keyword.operator.channel.verilog
      - match: \b(?:dist|inside|with|intersect|and|or|throughout|within|first_match)\b|:=|:/|\|->|\|=>|->>|\*>|#-#|#=#|&&&
        name: keyword.operator.logical.verilog
  comments:
    patterns:
      - begin: /\*
        beginCaptures:
          '0':
            name: punctuation.definition.comment.verilog
        end: \*/
        endCaptures:
          '0':
            name: punctuation.definition.comment.verilog
        patterns:
          - include: '#fixme-todo'
        name: comment.block.verilog
      - begin: //
        beginCaptures:
          '0':
            name: punctuation.definition.comment.verilog
        end: $\n?
        patterns:
          - include: '#fixme-todo'
        name: comment.line.double-slash.verilog
  fixme-todo:
    patterns:
      - match: (?i:fixme)
        name: invalid.broken.fixme.verilog
      - match: (?i:todo)
        name: invalid.unimplemented.todo.verilog
  port-net-parameter:
    patterns:
      - match: >-
          ,?[ \t\r\n]*(?:\b(output|input|inout|ref)\b[ \t\r\n]*)?(?:\b(localparam|parameter|var|supply[01]|tri|triand|trior|trireg|tri[01]|uwire|wire|wand|wor)\b[ \t\r\n]*)?(?:\b([a-zA-Z_][a-zA-Z0-9_$]*)(::))?(?:([a-zA-Z_][a-zA-Z0-9_$]*)\b[ \t\r\n]*)?(?:\b(signed|unsigned)\b[ \t\r\n]*)?(?:(\[[a-zA-Z0-9_:$\.\-\+\*/%`' \t\r\n\[\]\(\)]*\])[ \t\r\n]*)?(?<!(?<!#)[:&|=+\-*/%?><^!~\(][ \t\r\n]*)\b([a-zA-Z_][a-zA-Z0-9_$]*)\b[ \t\r\n]*(\[[a-zA-Z0-9_:$\.\-\+\*/%`' \t\r\n\[\]\(\)]*\])?[ \t\r\n]*(?=,|;|=|\)|/|$)
        captures:
          '1':
            name: support.type.direction.verilog
          '2':
            name: storage.type.net.verilog
          '3':
            name: support.type.scope.verilog
          '4':
            name: keyword.operator.scope.verilog
          '5':
            patterns:
              - include: '#built-ins'
              - match: '[a-zA-Z_][a-zA-Z0-9_$]*'
                name: storage.type.user-defined.verilog
          '6':
            patterns:
              - include: '#modifiers'
          '7':
            patterns:
              - include: '#selects'
          '8':
            patterns:
              - include: '#constants'
              - include: '#identifiers'
          '9':
            patterns:
              - include: '#selects'
        name: meta.port-net-parameter.declaration.verilog
  base-grammar:
    patterns:
      - include: '#all-types'
      - include: '#comments'
      - include: '#operators'
      - include: '#constants'
      - include: '#strings'
      - match: '[ \t\r\n]*\b([a-zA-Z_][a-zA-Z0-9_$]*)[ \t\r\n]+[a-zA-Z_][a-zA-Z0-9_,= \t\n]*'
        captures:
          '1':
            name: storage.type.interface.verilog
      - include: '#storage-scope'
  built-ins:
    patterns:
      - match: >-
          [ \t\r\n]*\b(bit|logic|reg)\b
        name: storage.type.vector.verilog
      - match: >-
          [ \t\r\n]*\b(byte|shortint|int|longint|integer|time|genvar)\b
        name: storage.type.atom.verilog
      - match: >-
          [ \t\r\n]*\b(shortreal|real|realtime)\b
        name: storage.type.notint.verilog
      - match: >-
          [ \t\r\n]*\b(supply[01]|tri|triand|trior|trireg|tri[01]|uwire|wire|wand|wor)\b
        name: storage.type.net.verilog
      - match: >-
          [ \t\r\n]*\b(genvar|var|void|signed|unsigned|string|const|process)\b
        name: storage.type.built-in.verilog
      - match: >-
          [ \t\r\n]*\b(uvm_(?:root|transaction|component|monitor|driver|test|env|object|agent|sequence_base|sequence_item|sequence_state|sequencer|sequencer_base|sequence|component_registry|analysis_imp|analysis_port|analysis_export|config_db|active_passive_enum|phase|verbosity|tlm_analysis_fifo|tlm_fifo|report_server|objection|recorder|domain|reg_field|reg_block|reg|bitstream_t|radix_enum|printer|packer|comparer|scope_stack))\b
        name: storage.type.uvm.verilog
  modifiers:
    match: >-
      [ \t\r\n]*\b(?:(?:un)?signed|packed|small|medium|large|supply[01]|strong[01]|pull[01]|weak[01]|highz[01])\b
    name: storage.modifier.verilog
  storage-scope:
    match: '\b([a-zA-Z_][a-zA-Z0-9_$]*)(::)'
    captures:
      '1':
        name: support.type.scope.verilog
      '2':
        name: keyword.operator.scope.verilog
    name: meta.scope.verilog
  strings:
    patterns:
      - begin: '`?"'
        beginCaptures:
          '0':
            name: punctuation.definition.string.begin.verilog
        end: '"`?'
        endCaptures:
          '0':
            name: punctuation.definition.string.end.verilog
        name: string.quoted.double.verilog
        patterns:
          - match: \\(?:[nt\\"vfa]|[0-7]{3}|x[0-9a-fA-F]{2})
            name: constant.character.escape.verilog
          - match: |-
              (?x)%
              (\d+\$)?                              # field (argument #)
              ['\-+0 #]*                            # flags
              [,;:_]?                               # separator character
              ((-?\d+)|\*(-?\d+\$)?)?               # minimum field width
              (\.((-?\d+)|\*(-?\d+\$)?)?)?          # precision
              (hh|h|ll|l|j|z|t|L)?                  # length modifier
              [xXhHdDoObBcClLvVmMpPsStTuUzZeEfFgG%] # conversion type
            name: constant.character.format.placeholder.verilog
          - match: '%'
            name: invalid.illegal.placeholder.verilog
          - include: '#fixme-todo'
      - begin: '(?<=include)[ \t\r\n]*(<)'
        beginCaptures:
          '1':
            name: punctuation.definition.string.begin.verilog
        end: '>'
        endCaptures:
          '0':
            name: punctuation.definition.string.end.verilog
        name: string.quoted.other.lt-gt.include.verilog
  module-binding:
    begin: '\.([a-zA-Z_][a-zA-Z0-9_$]*)[ \t\r\n]*\('
    beginCaptures:
      '1':
        name: support.function.port.verilog
    end: \),?
    patterns:
      - include: '#constants'
      - include: '#comments'
      - include: '#operators'
      - include: '#strings'
      - include: '#constants'
      - include: '#storage-scope'
      - include: '#cast-operator'
      - include: '#system-tf'
      - match: \bvirtual\b
        name: storage.modifier.verilog
      - include: '#identifiers'
    name: meta.port.binding.verilog
  parameters:
    begin: '[ \t\r\n]*(#)[ \t\r\n]*(\()'
    beginCaptures:
      '1':
        name: keyword.operator.channel.verilog
      '2':
        name: punctuation.section.parameters.begin
    end: (\))[ \t\r\n]*(?=;|\(|[a-zA-Z_]|\\|$)
    endCaptures:
      '1':
        name: punctuation.section.parameters.end
    patterns:
      - include: '#port-net-parameter'
      - include: '#comments'
      - include: '#constants'
      - include: '#operators'
      - include: '#strings'
      - include: '#system-tf'
      - include: '#functions'
      - match: \bvirtual\b
        name: storage.modifier.verilog
      - include: '#module-binding'
    name: meta.parameters.verilog
  identifiers:
    patterns:
      - match: \b[a-zA-Z_][a-zA-Z0-9_$]*\b
        name: variable.other.identifier.verilog
      - match: (?<=^|[ \t\r\n])\\[!-~]+(?=$|[ \t\r\n])
        name: string.regexp.identifier.verilog
  selects:
    begin: \[
    beginCaptures:
      '0':
        name: punctuation.slice.brackets.begin
    end: \]
    endCaptures:
      '0':
        name: punctuation.slice.brackets.end
    patterns:
      - match: \$(?![a-z])
        name: constant.language.verilog
      - include: '#system-tf'
      - include: '#constants'
      - include: '#operators'
      - include: '#cast-operator'
      - include: '#storage-scope'
      - match: '[a-zA-Z_][a-zA-Z0-9_$]*'
        name: variable.other.identifier.verilog
    name: meta.brackets.select.verilog
  attributes:
    begin: (?<!@[ \t\r\n]?)\(\*
    beginCaptures:
      '0':
        name: punctuation.attribute.rounds.begin
    end: \*\)
    endCaptures:
      '0':
        name: punctuation.attribute.rounds.end
    patterns:
      - match: ([a-zA-Z_][a-zA-Z0-9_$]*)(?:[ \t\r\n]*(=)[ \t\r\n]*)?
        captures:
          '1':
            name: keyword.control.verilog
          '2':
            name: keyword.operator.assignment.verilog
      - include: '#constants'
      - include: '#strings'
    name: meta.attribute.verilog
  imports:
    match: '[ \t\r\n]*\b(import|export)[ \t\r\n]+([a-zA-Z_][a-zA-Z0-9_$]*|\*)[ \t\r\n]*(::)[ \t\r\n]*([a-zA-Z_][a-zA-Z0-9_$]*|\*)[ \t\r\n]*(,|;)'
    captures:
      '1':
        name: keyword.control.verilog
      '2':
        name: support.type.scope.verilog
      '3':
        name: keyword.operator.scope.verilog
      '4':
        patterns:
          - include: '#operators'
          - include: '#identifiers'
    name: meta.import.verilog
  tables:
    begin: '[ \t\r\n]*\b(table)\b'
    beginCaptures:
      '1':
        name: keyword.table.verilog.begin
    end: '[ \t\r\n]*\b(endtable)\b'
    endCaptures:
      '1':
        name: keyword.table.verilog.end
    patterns:
      - include: '#comments'
      - match: '\b[01xXbBrRfFpPnN]\b'
        name: constant.language.verilog
      - match: '[-*?]'
        name: constant.language.verilog
      - match: '\(([01xX?]{2})\)'
        captures:
          '1':
            name: constant.language.verilog
      - match: ':'
        name: punctuation.definition.label.verilog
      - include: '#operators'
      - include: '#constants'
      - include: '#strings'
      - include: '#identifiers'
    name: meta.table.verilog
